{"version":3,"sources":["domIds.ts","index.ts"],"names":[],"mappings":";AAGe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,QAAA,UAAA,EAHf,IAAM,EAAO,SAAS,cAAc,SAG3B,QAAA,KAAA,EAFT,IAAM,EAAU,SAAS,cAAc,YAExB,QAAA,QAAA;;ACqGf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxGA,IAAA,EAAA,QAAA,YAEM,EAAO,WACT,EAAA,KAAK,iBAAiB,SAAU,IAI9B,EAAc,SAAC,GACjB,EAAE,iBACI,IAAA,EAAwB,EAAc,GACtC,EAA0B,EAAmB,GACnD,EAAA,QAAQ,UAAY,GAIlB,EAAqB,SAAC,GAClB,IAAA,EAAwC,EAAwB,GAA/D,EAAa,EAAA,GAAE,EAAQ,EAAA,GAAE,EAAS,EAAA,GAElC,MADiB,uBAAuB,EAAa,6BAA6B,EAAS,QAAQ,GAAE,8BAA8B,EAAU,QAAQ,GAAE,WAI5J,EAA0B,SAAC,GACvB,IAAA,EAAY,EAAa,GACzB,EAAa,EAAc,GAE3B,EADY,EAAa,GACG,EAGrB,MAAA,CAAC,EAFG,EAAiB,EAAgB,EAChC,EAAiB,EAAgB,IAKjD,EAAe,SAAC,GACZ,IACA,GAD+B,IAAlB,EAAO,OAAe,EAAO,MAAM,EAAG,GAAK,EAAO,MAAM,EAAG,IAChD,IAAI,SAAA,GAAS,OAAA,EAAiB,KAAQ,KAAK,IAElE,OADW,SAAS,IAKzB,EAAmB,SAAC,GAWf,MATO,UAAV,EAAqB,IACX,UAAV,EAAqB,IACX,QAAV,EAAqB,IACX,WAAV,EAAqB,IACX,WAAV,EAAqB,IACX,UAAV,EAAqB,IACX,SAAV,EAAqB,IACX,WAAV,EAAqB,IACX,SAAV,EAAqB,IAAM,KAK7B,EAAgB,SAAC,GAGZ,OADe,IAAlB,EAAO,OAAe,EAAkB,EAAO,IAAM,EAAkB,EAAO,KAIhF,EAAoB,SAAC,GAahB,MAXO,UAAV,EAAqB,KAAA,IAAA,GAAI,GACf,UAAV,EAAqB,KAAA,IAAA,GAAI,GACf,QAAV,EAAqB,KAAA,IAAA,GAAI,GACf,WAAV,EAAqB,KAAA,IAAA,GAAI,GACf,WAAV,EAAqB,KAAA,IAAA,GAAI,GACf,UAAV,EAAqB,KAAA,IAAA,GAAI,GACf,SAAV,EAAqB,KAAA,IAAA,GAAI,GACf,WAAV,EAAqB,KAAA,IAAA,GAAI,GACf,SAAV,EAAqB,KAAA,IAAA,GAAI,GACf,UAAV,EAAqB,KAAA,IAAA,GAAI,GACf,SAAV,EAAqB,GAAQ,KAK/B,EAAe,SAAC,GAIX,OAFe,IAAlB,EAAO,OAAe,EAAiB,EAAO,IAC5B,IAAlB,EAAO,OAAe,EAAiB,EAAO,IAAM,IAItD,EAAmB,SAAC,GASf,MAPO,UAAV,EAAqB,IACX,QAAV,EAAqB,IACX,UAAV,EAAqB,KACX,SAAV,EAAqB,MACX,WAAV,EAAqB,KACX,SAAV,EAAqB,KACX,SAAV,EAAqB,IAAQ,IAI/B,EAAgB,SAAC,GAIZ,MAHY,CAAC,EAAE,OAAO,GAAI,EAAE,OAAO,GAAI,EAAE,OAAO,GAAI,EAAE,OAAO,GAAI,EAAE,OAAO,IACvD,IAAI,SAAA,GAAa,OAAA,EAAU,QAC9B,OAAO,SAAA,GAAS,MAAU,UAAV,KAI3C,QAAA,QAAe","file":"index.js","sourceRoot":"..\\src","sourcesContent":["const form = document.querySelector('#form')\r\nconst message = document.querySelector('#message')\r\n\r\nexport { form, message }","import { form, message } from './domIds';\r\n\r\nconst main = ():void => {\r\n    form.addEventListener('submit', processForm)\r\n}\r\n\r\n\r\nconst processForm = (e): void => {\r\n    e.preventDefault()\r\n    const colors: Array<string> = getFormColors(e),\r\n          resistorMessage: string = getMessageToAppend(colors) \r\n    message.innerHTML = resistorMessage\r\n}\r\n\r\n\r\nconst getMessageToAppend = (colors: Array<string>): string => {\r\n    const [resistorValue, lowValue, highValue ] = calculateResistorValues(colors),\r\n          resistorMessage = `<h3>Resistor Value: ${resistorValue}Ω.</h3><h3>Low Tolerance: ${lowValue.toFixed(2)}Ω.</h3><h3>High Tolerance: ${highValue.toFixed(2)}Ω.</h3>`\r\n    return resistorMessage\r\n}\r\n\r\nconst calculateResistorValues = (colors: Array<string>): Array<number> => {\r\n    const tolerance = getTolerance(colors),\r\n          multiplier = getMultiplier(colors),\r\n          bandValue = getBandValue(colors),\r\n          resistorValue = bandValue * multiplier,\r\n          lowValue = resistorValue - (resistorValue * tolerance),\r\n          highValue = resistorValue + (resistorValue * tolerance)\r\n          return [resistorValue, lowValue, highValue]\r\n}\r\n\r\n\r\nconst getBandValue = (colors: Array<string>): number => {\r\n    const bandColors = colors.length === 5 ? colors.slice(0, 4) : colors.slice(0, 3),\r\n          bandString = bandColors.map(color => colorToBandValue(color)).join(''),\r\n          bandValue = parseInt(bandString)\r\n    return bandValue\r\n}\r\n\r\n\r\nconst colorToBandValue = (color: string): string => {\r\n    const bandValue =\r\n        color === 'black'  ? '0' :\r\n        color === 'brown'  ? '1' :\r\n        color === 'red'    ? '2' :\r\n        color === 'orange' ? '3' :\r\n        color === 'yellow' ? '4' :\r\n        color === 'green'  ? '5' :\r\n        color === 'blue'   ? '6' :\r\n        color === 'violet' ? '7' :\r\n        color === 'grey'   ? '8' : '9'\r\n    return bandValue\r\n}\r\n\r\n\r\nconst getMultiplier = (colors: Array<string>): number => {\r\n    const multiplier: number = \r\n        colors.length === 5 ? colorToMultiplier(colors[3]) : colorToMultiplier(colors[2])\r\n    return multiplier\r\n}\r\n\r\nconst colorToMultiplier = (color: string): number => {\r\n    const multiplier =\r\n        color === 'black'  ? 10**0 :\r\n        color === 'brown'  ? 10**1 :\r\n        color === 'red'    ? 10**2 :\r\n        color === 'orange' ? 10**3 :\r\n        color === 'yellow' ? 10**4 :\r\n        color === 'green'  ? 10**5 :\r\n        color === 'blue'   ? 10**6 :\r\n        color === 'violet' ? 10**7 :\r\n        color === 'grey'   ? 10**8 :\r\n        color === 'white'  ? 10**9 :\r\n        color === 'gold'   ? .1    : .01\r\n    return multiplier\r\n}\r\n\r\n\r\nconst getTolerance = (colors: Array<string>): number => {\r\n    const tolerance: number = \r\n        colors.length === 4 ? colorToTolerance(colors[3]) :\r\n        colors.length === 5 ? colorToTolerance(colors[4]) : .2\r\n    return tolerance\r\n}\r\n\r\nconst colorToTolerance = (color: string): number => {\r\n    const tolerance: number =\r\n        color === 'brown'  ? .01   :\r\n        color === 'red'    ? .02   :\r\n        color === 'green'  ? .005  :\r\n        color === 'blue'   ? .0025 :\r\n        color === 'violet' ? .001  :\r\n        color === 'grey'   ? .0005 :\r\n        color === 'gold'   ? .05   : .1\r\n    return tolerance\r\n}\r\n\r\nconst getFormColors = (e): Array<string> => {\r\n    const formColors = [e.target[0], e.target[1], e.target[2], e.target[3], e.target[4]],\r\n          colors = formColors.map(formColor => formColor.value),\r\n          colors2 = colors.filter(color => color !== 'empty')\r\n    return colors2\r\n}\r\n\r\nexport default main"]}