{"version":3,"sources":["src/domIds.ts","src/index.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.b0a109ad.js","sourceRoot":"..","sourcesContent":["const form = document.querySelector('#form')\r\nconst message = document.querySelector('#message')\r\n\r\nexport { form, message }","import { form, message } from './domIds';\r\n\r\nconst main = ():void => {\r\n    form.addEventListener('submit', processForm)\r\n}\r\n\r\n\r\nconst processForm = (e): void => {\r\n    e.preventDefault()\r\n    const colors: Array<string> = getFormColors(e),\r\n          resistorMessage: string = getMessageToAppend(colors) \r\n    message.innerHTML = resistorMessage\r\n}\r\n\r\n\r\nconst getMessageToAppend = (colors: Array<string>): string => {\r\n    const [resistorValue, lowValue, highValue ] = calculateResistorValues(colors),\r\n          resistorMessage = `<h3>Resistor Value: ${resistorValue}Ω.</h3><h3>Low Tolerance: ${lowValue.toFixed(2)}Ω.</h3><h3>High Tolerance: ${highValue.toFixed(2)}Ω.</h3>`\r\n    return resistorMessage\r\n}\r\n\r\nconst calculateResistorValues = (colors: Array<string>): Array<number> => {\r\n    const tolerance = getTolerance(colors),\r\n          multiplier = getMultiplier(colors),\r\n          bandValue = getBandValue(colors),\r\n          resistorValue = bandValue * multiplier,\r\n          lowValue = resistorValue - (resistorValue * tolerance),\r\n          highValue = resistorValue + (resistorValue * tolerance)\r\n          return [resistorValue, lowValue, highValue]\r\n}\r\n\r\n\r\nconst getBandValue = (colors: Array<string>): number => {\r\n    const bandColors = colors.length === 5 ? colors.slice(0, 4) : colors.slice(0, 3),\r\n          bandString = bandColors.map(color => colorToBandValue(color)).join(''),\r\n          bandValue = parseInt(bandString)\r\n    return bandValue\r\n}\r\n\r\n\r\nconst colorToBandValue = (color: string): string => {\r\n    const bandValue =\r\n        color === 'black'  ? '0' :\r\n        color === 'brown'  ? '1' :\r\n        color === 'red'    ? '2' :\r\n        color === 'orange' ? '3' :\r\n        color === 'yellow' ? '4' :\r\n        color === 'green'  ? '5' :\r\n        color === 'blue'   ? '6' :\r\n        color === 'violet' ? '7' :\r\n        color === 'grey'   ? '8' : '9'\r\n    return bandValue\r\n}\r\n\r\n\r\nconst getMultiplier = (colors: Array<string>): number => {\r\n    const multiplier: number = \r\n        colors.length === 5 ? colorToMultiplier(colors[3]) : colorToMultiplier(colors[2])\r\n    return multiplier\r\n}\r\n\r\nconst colorToMultiplier = (color: string): number => {\r\n    const multiplier =\r\n        color === 'black'  ? 10**0 :\r\n        color === 'brown'  ? 10**1 :\r\n        color === 'red'    ? 10**2 :\r\n        color === 'orange' ? 10**3 :\r\n        color === 'yellow' ? 10**4 :\r\n        color === 'green'  ? 10**5 :\r\n        color === 'blue'   ? 10**6 :\r\n        color === 'violet' ? 10**7 :\r\n        color === 'grey'   ? 10**8 :\r\n        color === 'white'  ? 10**9 :\r\n        color === 'gold'   ? .1    : .01\r\n    return multiplier\r\n}\r\n\r\n\r\nconst getTolerance = (colors: Array<string>): number => {\r\n    const tolerance: number = \r\n        colors.length === 4 ? colorToTolerance(colors[3]) :\r\n        colors.length === 5 ? colorToTolerance(colors[4]) : .2\r\n    return tolerance\r\n}\r\n\r\nconst colorToTolerance = (color: string): number => {\r\n    const tolerance: number =\r\n        color === 'brown'  ? .01   :\r\n        color === 'red'    ? .02   :\r\n        color === 'green'  ? .005  :\r\n        color === 'blue'   ? .0025 :\r\n        color === 'violet' ? .001  :\r\n        color === 'grey'   ? .0005 :\r\n        color === 'gold'   ? .05   : .1\r\n    return tolerance\r\n}\r\n\r\nconst getFormColors = (e): Array<string> => {\r\n    const formColors = [e.target[0], e.target[1], e.target[2], e.target[3], e.target[4]],\r\n          colors = formColors.map(formColor => formColor.value),\r\n          colors2 = colors.filter(color => color !== 'empty')\r\n    return colors2\r\n}\r\n\r\nexport default main","import main from './index';\r\n\r\n(() => main())();"]}